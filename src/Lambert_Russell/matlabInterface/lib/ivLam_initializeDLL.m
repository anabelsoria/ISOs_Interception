%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
%    This file is part of the software ivLam version 2.
%
%    ivLam is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    ivLam is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with ivLam.  If not, see <https://www.gnu.org/licenses/>.
%
%    Reference the papers by Russell, R.P. describing ivLam in any 
%    published or posted or distributed derivative work that uses ivLam.
%    The most current uploaded version of the code is available here: 
%    https://doi.org/10.5281/zenodo.3479923
     
%----------------------------------------------------------------------------------------------
% [1] Russell, Ryan P., "On the Solution to Every Lambert Problem," 
%        Celestial Mechanics and Dynamical Astronomy, Vol. 131, Article 50, 2019, pp. 1â€“33, 
%        https://dx.doi.org/10.1007/s10569-019-9927-z 
%
% [2] Russell, Ryan P., "Complete Lambert Solver Including Second-Order Sensitivities," 
%        Journal of Guidance, Control, and Dynamics, accepted 2021,
%        https://doi.org/10.2514/1.G006089 
%----------------------------------------------------------------------------------------------
% CODE AUTHOR:      Ryan P. Russell, send questions/comments/bugs to ryan.russell@utexas.edu
% UPDATES:          August 2021, RPR: updated for version 2.XX of code to accompany the second   
%                   paper [2] that includes sensitivity calculations, a single ~1MB data file,   
%                   and essentially no limits on TOF or N.
%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
% DATE:             11/12/2018
% INPUTS/OUTPUTS:   see exampleDriver_ivLamDLL.m driver routine
%                   and/or see subroutine ivLam_initialize() in accompanying .f90 code
%                   the input is the path/location and name of the .bin coefficient file
% DESCRIPTION:
% This function must be called before using any ivLam MATLAB interface
% routines.  It loads the coefficient data for the initial guess.
%
function [info] = ivLam_initializeDLL( dllDirectoryPath)

info=0;

if(dllDirectoryPath(end)~='/'&dllDirectoryPath(end)~='\')
    info=-98;
    dllDirectoryPath
    disp('dllDirectoryPath string should end in a slash')
    return
end


lis=dir([dllDirectoryPath '*.bin']);
if(length(lis)~=1)
    disp('problem, there can only be a single  .bin file in the dllDirectoryPath')
    return
end
coefFilePath=[dllDirectoryPath lis.name]


%-----------------------------------------------
%Below is the matlab library initialization
%-----------------------------------------------
already=libisloaded('ivLamDLL')==1;
if(already)
    unloadlibrary ivLamDLL;
end

%these are local files generated by matlab when the library isfirst loaded
switch(2) %2 suggested
    case(1) %only erase if any files are missing. caution as you need to update these anytime the dll is changed.
        fileThere(1)=exist('ivLamDLL_matlabGenerated.m')==2;
        fileThere(2)=exist('ivLamDLL_thunk_pcwin64.dll')==2;
        fileThere(3)=exist('ivLamDLL_thunk_pcwin64.exp')==2;
        fileThere(4)=exist('ivLamDLL_thunk_pcwin64.lib')==2;
        fileThere(5)=exist('ivLamDLL_thunk_pcwin64.obj')==2;
        need2generateLocalLibs=any(fileThere==0);
    case(2) %always regenerate files.  safer option.
        need2generateLocalLibs=true;
end

if(need2generateLocalLibs)
    delete('ivLamDLL_t*') %all the thunk files
    delete('ivLamDLL_matlabG*') %the .m file
    loadlibrary([dllDirectoryPath 'ivLamDLL.dll'],[dllDirectoryPath 'ivLam.h'],'mfilename','ivLamDLL_matlabGenerated.m');
else
    %this loads once youve already made the ivLam.m file
    loadlibrary('ivLamDLL.dll',@ivLamDLL_matlabGenerated);
end

%-----------------------------------------------
%Below is the ivLam initialization
%-----------------------------------------------
upToNmaxForStoringDetails=-1  %should be -1 for matlab implementation, in Fortran, you can have access to all the details of a thruN call, not here
[upToNmaxForStoringDetails,coefFilePath,info]=calllib('ivLamDLL','ivLam_initializeDLL',upToNmaxForStoringDetails,coefFilePath,info);
if(info~=0)
    disp('problem with loading coefficients, see log file')
    return
else
    fprintf('\nivLam routines successfully initialized, see log file for details, no limit on number of revolutions\n')
end



