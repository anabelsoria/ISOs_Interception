function [methodinfo,structs,enuminfo,ThunkLibName]=ivLamDLL_matlabGenerated
%IVLAMDLL_MATLABGENERATED Create structures to define interfaces found in 'ivLam'.

%This function was generated by loadlibrary.m parser version  on Wed May 10 10:41:12 2023
%perl options:'ivLam.i -outfile=ivLamDLL_matlabGenerated.m -thunkfile=ivLamDLL_thunk_pcwin64.c -header=ivLam.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ivLamDLL_thunk_pcwin64');
% void ivLam_unloadDataDLL ( int * info ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ivLam_unloadDataDLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% void ivLam_initializeDLL ( int * N , char * path , int * info ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='ivLam_initializeDLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% void ivLam_zeroRev_multipleInputDLL ( int * Q , double * r1vec , double * r2vec , double * tof , int * direction , double * v1vec , double * v2vec , int * infoReturnStatus , int * infoHalfRevStatus ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ivLam_zeroRev_multipleInputDLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% void ivLam_singleN_multipleInputDLL ( int * Q , double * r1vec , double * r2vec , double * tof , int * direction , int * Ntilde , bool * wantBothIfMultiRevInt , double * v1vecA , double * v2vecA , double * v1vecB , double * v2vecB , int * infoReturnStatus , int * infoHalfRevStatus ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ivLam_singleN_multipleInputDLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'boolPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% void ivLam_singleN_withDetailsDLL ( double * r1vec , double * r2vec , double * tof , int * direction , int * Ntilde , double * v1vecA , double * v2vecA , int * infoReturnStatus , int * infoHalfRevStatus , double * detailsVec ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ivLam_singleN_withDetailsDLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% void ivLam_thruN_multipleInputDLL ( int * Q , double * r1vec , double * r2vec , double * tof , int * direction , int * uptoNwant , int * dimV , double * v1vec , double * v2vec , int * uptoNhave , int * infoReturnStatus , int * infoHalfRevStatus ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ivLam_thruN_multipleInputDLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% void ivLam_NtildeWithDerivs_multipleInputDLL ( int * Q , double * r1vec , double * r2vec , double * tof , int * direction , int * Ntilde , double * v1vec , double * v2vec , int * infoReturnStatus , int * infoHalfRevStatus , bool * includeSecondOrder , double * dzdyT , double * d2zdyT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ivLam_NtildeWithDerivs_multipleInputDLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'boolPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
methodinfo=fcns;